<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Zencode</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/home_page.css" />
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
            display: flex;
            flex-direction: row;
        }

        #sidebar {
            width: 200px;
            margin-right: 20px;
        }

        #history {
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            max-height: 400px;
            overflow-y: auto;
        }

        #history h3 {
            margin-top: 0;
        }

        .history-item {
            cursor: pointer;
            padding: 5px;
            border-radius: 4px;
        }

        .history-item:hover {
            background-color: #f0f0f0;
        }

        #main {
            flex: 1;
        }

        #editor-container {
            width: 100%;
            height: 75vh;
            border: 2px solid #000;
            border-radius: 8px;
            margin-top: 20px;
        }

        #actions {
            margin-top: 15px;
        }

        button {
            padding: 10px 20px;
            margin-right: 10px;
            border: none;
            background-color: #2b6cb0;
            color: white;
            font-weight: bold;
            cursor: pointer;
            border-radius: 5px;
        }

        button:hover {
            background-color: #2c5282;
        }

        input[type="text"] {
            padding: 8px;
            margin-top: 10px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div id="sidebar">
        <h3>üìÇ Historique</h3>
        <div id="history"></div>
    </div>
    <div id="main">
        <h1>Zencode</h1>
        <input type="file" id="fileInput" accept=".txt,.js,.html,.css,.json" />
        <input type="text" id="fileNameInput" placeholder="Nom du fichier..." />
        <div id="editor-container"></div>
        <div id="actions">
            <button id="saveBtn">üíæ Sauvegarder</button>
            <button id="resetBtn">üóëÔ∏è R√©initialiser</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/loader.min.js"></script>
    <script>
        let editor;
        let originalContent = '';
        let recentFiles = [];
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            editor = monaco.editor.create(document.getElementById('editor-container'), {
                value: '',
                language: 'plaintext',
                theme: 'vs-dark',
                automaticLayout: true
            });
        });
        const fileInput = document.getElementById('fileInput');
        const fileNameInput = document.getElementById('fileNameInput');
        const saveBtn = document.getElementById('saveBtn');
        const resetBtn = document.getElementById('resetBtn');
        const historyContainer = document.getElementById('history');

        function updateHistoryUI() {
            historyContainer.innerHTML = '';
            recentFiles.slice().reverse().forEach(file => {
                const div = document.createElement('div');
                div.className = 'history-item';
                div.textContent = file.name;
                div.addEventListener('click', () => {
                    editor.setValue(file.content);
                    fileNameInput.value = file.name;
                    setLanguageFromExtension(file.name);
                    originalContent = file.content;
                });
                historyContainer.appendChild(div);
            });
        }

        function setLanguageFromExtension(filename) {
            const extension = filename.split('.').pop();
            const langMap = {
                js: 'javascript',
                html: 'html',
                css: 'css',
                json: 'json',
                txt: 'plaintext'
            };
            const detectedLang = langMap[extension] || 'plaintext';
            monaco.editor.setModelLanguage(editor.getModel(), detectedLang);
        }
        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (!file) return;
            fileNameInput.value = file.name;
            const reader = new FileReader();
            reader.onload = function (e) {
                const content = e.target.result;
                editor.setValue(content);
                setLanguageFromExtension(file.name);
                originalContent = content;
                recentFiles.push({ name: file.name, content });
                if (recentFiles.length > 20) recentFiles.shift();
                updateHistoryUI();
            };
            reader.readAsText(file, 'UTF-8');
        });
        saveBtn.addEventListener('click', () => {
            const content = editor.getValue();
            const fileName = fileNameInput.value.trim();
            if (!fileName) {
                alert('Veuillez entrer un nom de fichier avant de sauvegarder.');
                return;
            }
            const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
        });
        resetBtn.addEventListener('click', () => {
            editor.setValue(originalContent || '');
        });
    </script>
</body>
</html>
